<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>縁側ごろごろ</title>
    <link>https://Natsu-dev.github.io/</link>
    <description>Recent content on 縁側ごろごろ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 31 Dec 2021 00:04:00 +0900</lastBuildDate><atom:link href="https://Natsu-dev.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Raspberry Pi 4B でちゃんと動くMinecraft Serverを作りたい</title>
      <link>https://Natsu-dev.github.io/posts/2021-12-31/</link>
      <pubDate>Fri, 31 Dec 2021 00:04:00 +0900</pubDate>
      
      <guid>https://Natsu-dev.github.io/posts/2021-12-31/</guid>
      <description>大晦日の深夜に RTA in Japan を視聴しながらの更新です。今ちょうどやってた Cook, Serve, Delicious! 3?! というゲームの RTA メッチャ面白かったです。
今回ですが、Raspberry Pi 4B でもプレイ時にストレスの少ない自宅サーバーを構築できないものか…と色々試してみて、とりあえず形になったので書き残しておこうという感じです。
サーバー構築の方針 ゲーマー仲間とマイクラのマルチで一緒に遊ぶために24時間稼働の自宅サーバーを構築することにしたのですが、当初使っていた中古の Intel Core i7-3770 搭載のデスクトップPCでは、動かしっぱなしにするとなると電気代が気になる上に、だいぶ使い込まれていた中古なため外出中にトラブルが発生する可能性がありました。
なので、以前に新品で購入して使っていたラズパイを使うことにします。
  過去にこのブログでは『CUIの画面で何とかしてスクリーンショットを撮りたい』、OUCRCでは『ぼっちは寂しいのでプログラミングで彼女（概念）を生み出してみた』などで登場したものです。
余談ですが、OUCRCの方の彼女（概念）の記事が、知らないうちに部内の記事コンテストで技術部門 3位に入賞していたようです。嬉しいです。どうして。
  　Raspberry Pi のメリット、デメリット デスクトップPCと比較したときの Raspberry Pi でマイクラ自宅サーバーを構築するメリットは以下のようになると思います。
 消費電力が小さい 置き場所に困らない 安価で手軽に構築できる  逆にデメリットは以下のような感じでしょう。
 CPU、メモリなどの基本的なマシンスペックが超厳しい Micro SD カードが起動ドライブのため読み書きが遅く、また耐久性が心配  私の場合はデスクトップPCのサーバーが中古のため信頼性があまり高くないというのもラズパイを選択した理由になります。
各種デメリットへの対処 ということで、ラズパイでサーバーを構築する上で発生するデメリットにどうにか対処する方法について考えていきます。 といってもソフトウェア的な部分だけではどうにもならないレベルで性能不足なので、一部追加のお買い物をしてラズパイをサイボーグ化するところまでやります。本気出していこうな。
① CPU、メモリなどの基本的なマシンスペックが超厳しい 正直に言ってコレが一番やばいです。マイクラサーバーの構築に関して言えるのは、低消費電力のためにそのマシンスペックを完全に犠牲にしているのだぞということです。覚悟は良いか…？
仕方ないので可能な限りの軽量化を試みるのですが、軽量化のために検討できる部分としては OS をどうするかとサーバーアプリケーションをどうするかという話になってくると思います。
OSの検討 例えば軽量な Linux のディストリビューションと言えばArch Linuxとかがありますね。必要なモンは自分で入れてセットアップしてくれよな！ というシンプルイズベストを地で行くような軽量ディストリビューションです。
実は Arch Linux のウェブドキュメントでもサーバーとしての運用が十分に可能であることが示されており正直メチャクチャ魅力的だったのですが、結論から申し上げると導入難易度が高いという点でひとまず先送りにしました。ドキュメントがとんでもなく充実しているので、もっと勉強して実際に使ってみて、ある程度ちゃんと扱えるレベルに達したら導入してみようかと思います。</description>
    </item>
    
    <item>
      <title>電算研UnionHack 2021 ①</title>
      <link>https://Natsu-dev.github.io/posts/2021-09-18/</link>
      <pubDate>Sat, 18 Sep 2021 00:00:00 +0900</pubDate>
      
      <guid>https://Natsu-dev.github.io/posts/2021-09-18/</guid>
      <description>超絶久しぶりとなる更新です。色々とやることが多くてネタは山ほどあるのに全然ブログ書けてません。そんなぁ…
さて今回ですが、近畿大学電子計算機研究会（以降 近大電算研 と呼びます）主催の &amp;ldquo;電算研UnionHack&amp;rdquo; というイベントが8/23～8/30の日程で開催されたので、岡山大学電子計算機研究会のメンバーとして参加させて頂きました。そのときにやったことをつらつらと書きます。
なお、電算研UnionHackのYouTube配信のアーカイブのキャプチャを掲載していますが、これらは事前に近大電算研の許可を得ています。記事の最後に配信アーカイブの埋め込みを置いておきます。
大雑把なイベントの概要とか この電算研UnionHackですが、端的に言えばハッカソン的なことをやるイベントです。数人でチームを組んで、イベント内で共通のテーマに沿ったうえで1週間かけて電算研っぽい作品（プログラムとか動画とか音楽とかデザインとか、何でもアリみたい）を作って成果発表をするという感じの内容です。
近大電算研が主催となって、全国の各大学に存在する（らしい）「電子計算機研究会」とつく校友会やサークルを呼んで開催したという感じみたいです。当日会場となっていたZoom会議に入ったところ近畿大学、千葉大学、岡山大学の3大学から参加者が集まっているようでした。
電算研UnionHack-2021-が遂に開催！！
#電算研UnionHack でツイートして、ハッカソンを盛り上げましょう！
【発表会のYouTube配信はこちらから】
8月30日(月) 13:00 ～
https://t.co/OC0yCngn6y pic.twitter.com/zedSQRyPIG
&amp;mdash; 電算研UnionHack (@HackUnion2000) August 23, 2021  日程は以下のような感じです。
 8/23 : 開会式、チーム分け 8/24 - 8/29 : 開発期間 8/30 : 成果発表会、閉会式  8/23 開会式 開会式では、チーム分けとアイスブレイク、そしてテーマ発表が行われました。
  チーム分けは主催側で予め決められており、近畿大学からふじふじ氏、千葉大学からあんぱん氏の2名と共に Group D になりました。大学がいい感じにバラバラでいい感じ（？）。他のチームは同じ大学同士の方もいたようですが、うちはお互いに初めましてだったのでそれはそれで楽しかったですね。
アイスブレイクガチ勢 大敗を喫する アイスブレイクでは「ハンドメイドビンゴゲーム」と題したゲームを行いました。ルールは簡単。
 主催側がお題を出す　例「赤」 チーム内でお題から連想される単語を列挙する　例「消防車」「りんご」 ビンゴカードにそれらを配置する あとは通常のビンゴゲームの要領で、主催側が発表した単語について、カード中の配置と数でビンゴ数を競う また、特殊ルールとして事前にいくつかの単語は含まれることが確定している    近大電算研の用意した説明の画像わかりやすすぎ。
第一問 さて、第一問のビンゴカードは3x3、お題は「輪」、確定単語は「ドーナツ」「はにわ」。
ここで素直にすぐ思いつきそうな単語を順に並べていっても良いのですが、ガッチガチの心理戦を展開することを決意した我が Group D は 主催が入れそうな単語に絞るというきったねえやり方に着手します。</description>
    </item>
    
    <item>
      <title>CUIの画面で何とかしてスクリーンショットを撮りたい</title>
      <link>https://Natsu-dev.github.io/posts/2021-04-22/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0900</pubDate>
      
      <guid>https://Natsu-dev.github.io/posts/2021-04-22/</guid>
      <description>CUIの画面を直撮りするのはなんだかなぁ たぶんまた今度記事にするとは思うのですが、ちょっとした興味からUbuntu Serverというサーバ用のOSを使ってみています。 普段我々が使っているWindows 10のような、デスクトップ画面とかマウスポインタとかアプリアイコンとかがあるGUIと呼ばれる見た目とは異なって、 基本的にはこういったサーバ用のOSではコマンド入力で操作を行うCUIという見た目のものが使われています。
わかりやすく言うと、Windowsでコマンドプロンプトというアプリを実行してもらえば出てくるような、黒地に白い文字がつらつらと並んでいる感じで動いています。
  操作はキーボードによる文字の入力なので画面には文字しか表示されず、普段のノリでPrintScreenキーを押してそのまま貼り付け！というわけにはいかないのです。残念。 ですがせっかくこうやって普段やってることをブログにしているからには、何とかしてこのUbuntu Serverの画面を撮影したいというものです。
一番簡単なのは画面をスマホのカメラで撮影することなのですが、もっと文字がちゃんと読めるぐらい綺麗に撮影できないものか……というのが目下の悩みだったわけです。
放置されていたキャプチャーボードの出番 そのとき、私に電流走る――――。
キャプチャーボードというものがあります。ゲームの画面をPC上に映すことができるという優れもので、例えばゲーム実況者がゲームの収録に使うときなんかに登場する装置です。
実は今から1年前、ポケモン剣盾にドハマりしていた頃にDiscordで友人に画面を見せながら遊ぼうと考えてそのキャプチャーボードを買っていたのですが、 買ってすぐに音ゲーの開発を初めて以来サッパリSwitchを触る時間がなくなってしまい、そのまま飽きが来たことで結果としてほとんど出番のないままに長い眠りにつくことになったという悲しいものです。
    マジで勿体ない買い物だったかなぁと普通にガッツリ後悔していたのですが、1年以上の時を経て、ある妙案を思いつきます。
　……これ、HDMI出力なら何でもWindows上に表示できるっぽいし、じゃあ当然CUIの画面でもイケるよな………？
　配線して動かしてみる ということで、Ubuntu Serverを実行するRaspberry PiのMini HDMIから出力される映像をそのままキャプチャーボードのin側に送り、 キャプチャーボードをUSBでSurface Pro 6（これはWindows 10が動いている）に接続。
  Windows上でキャプチャーボードの映像を表示するアプリを起動して、Raspberry Piの電源をON。
　…………
　…………
　！！！！！！！！！！！！！！！！
  出るやんけ！！！！！！！！！！！
　  UIのカメラマークを押すとビットマップ形式でキャプチャしてくれるのですが、こんな感じで画質も良好。 lsしたときのディレクトリのような青色の文字が若干潰れ気味でしたが、ブログに載せるには十分の画質でした。最高。
結論 キャプチャボードを使えばCUIの画面もキャプチャできることがわかりました、満足。 ということでUbuntu Serverを使った楽しいことをやる予定なので、その話はまた今度にでも。
余談 デスクトップの背景の絵は知人が描いたものです。めっちゃかわいい。良かったらぜひフォローしてください（ダイマ）。
フランちゃん！ pic.twitter.com/qVBN0hsa1S
&amp;mdash; 雲粥＊くろば (@kumokayu) January 31, 2019  </description>
    </item>
    
    <item>
      <title>Surface Pro 2 (ただし中身はUbuntu)</title>
      <link>https://Natsu-dev.github.io/posts/2021-04-05/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0900</pubDate>
      
      <guid>https://Natsu-dev.github.io/posts/2021-04-05/</guid>
      <description>古いSurfaceってLinuxブートできるんですよ そんな意味の分からない話をされても「？？？」という感情でいっぱいになるのですが、ある私の友人はよくこの話をします。 Microsoft製のPCなんだから当然元々入ってるWindowsしか動かないもんだと完全に思い込んでいたのですが、それは最近のSurfaceの話であって古いものならそうとも限らない模様。
彼は生粋のSurfaceマニアで、Surface ProシリーズをRTから現行の7+まで合計7台所有しているほどの筋金入りです。 そんな有り余るSurfaceにあんなことやこんなことを色々施してはムフフとしている彼ですが、つい先日のこと、 数台所有している（←ここが既に意味不明）Surface Pro 2のうち1台のタッチパネルの一部が反応しなくなってしまったようです。
もう使わないけどタッチパネル以外は正常なので良かったらどうですか、と声を掛けて頂いて私が譲り受けることになりました。
ところでOSどうする？ 受け取る数日前あたりにいきなりこう訊かれたのでびっくりしました。
彼がSurfaceに色々なインストールして楽しんでいる様子はよく見ていたし、 私はといえば諸事情あってLinux系OSの動くPCが欲しいと思ってそういう相談をしていたのもあったし、 まぁ自然っちゃ自然な流れだったのかもしれないけど。
それはそうとしても、Surfaceを譲り渡すにあたってWindows以外のOSを選択肢に持ち出すのは面白すぎるでしょ。
最初はXubuntuをお願いしたのですが、これが何だか調子があまり良くなかったりタブレット端末向きではなかったりしたので、後日無印のUbuntuに入れ替えてもらいました。
初めてのUbuntu 何故かUSBブートができなかったのでめっちゃ大変でしたが、無事にUbuntu 20.04.2 LTSのインストールが完了。
XubuntuでBIOSがGRUBに乗っ取られて、USBメディアから起動できなくなっていたSurface Pro 2、無事救出できました！ pic.twitter.com/1gS87HiAq5
&amp;mdash; shige7 (@windows7_love) March 30, 2021  早速ですが背景はYouTubeにアップした自作曲の動画から持ってきて変更しています。
こんな感じで、Surfaceという文字列とUbuntuという文字列が共存するメッチャ面白い画が撮れます。もう楽しい。   [設定]→[このシステムについて]から端末の情報やOSのバージョンなどを確認できますがここだけ見ても最高ですね。楽しい。   カスタマイズ キーボードショートカットをいくつか設定、変更しています。
 ホームフォルダー: Super + E 端末を起動: Super + T 設定: Super + I 選択領域のスクショをクリップボードにコピー: shift + Super + S  最後のスクショについては、Windows 10で同様の機能をshift + Windows + Sで使用しているためです。 全然関係ない余談ですがUbuntuではWindowsでいうWindowsキーのことをSuperキーっていうんですね。
それとキーボードの配列が英語になってると半角/全角キーとかが使えなくてしんどいので日本語にしておきます。
参考：Ubuntu で日本語キーボードレイアウト - Qiita</description>
    </item>
    
    <item>
      <title>GitHub PagesとHugoを使ってブログを作ってみた</title>
      <link>https://Natsu-dev.github.io/posts/2021-02-28/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0900</pubDate>
      
      <guid>https://Natsu-dev.github.io/posts/2021-02-28/</guid>
      <description>はじめまして。Natsuです、ふぉって名前も使ってます。 ここではだいたい趣味のことを書くと思います。 最初なので、個人的なメモ書きも兼ねてこのブログの作り方をまとめておきます。
GitHub Pagesでブログが作れるらしい 何となしにネットの海をサーフィンしていると、ふと立ち寄ったブログのURLが~.github.ioでした。
へぇ～GitHub Pagesでブログが作れるんだ～。わたしもやりたい。
ググってみると、静的サイトジェネレータを使うとMarkdownで書いたファイルを元にWebページを生成できるみたいです。 『GitHub Pages ブログ』と検索したところ静的サイトジェネレータの名前がいくつか出てきたのですが、なんとなくおもしろそうだったのでHugoを使ってみることにします。
Hugoを使って実際に作ってみる Hugoの導入 まずHugo Extendedをインストールするのですが、Windowsでは例えばChocolateyなどのパッケージマネージャを使うので、まずはそちらをインストールしておきます。
chocoコマンドが使えるようになったら、Hugo Extendedをインストールします。
GitHubの準備とThemeの導入 続いてブログ作成のための環境構築をします。以下の記事を参考にさせて頂きました。
3分で GitHub にブログを作る (Hugo + GitHub Pages) - Qiita
HugoではThemeと呼ばれるページレイアウトのテンプレートのようなものがHugo Themesで色々公開されていて、 『Hugo Future Imperfect』というテーマが個人的にとても好きなので導入します。
先ほどの環境構築の記事ではconfig.tomlを編集するようになっています。 themes/hugo-future-imperfect/exampleSiteにあるconfig.tomlをコピーして、ブログ本体のディレクトリに元々あるconfig.tomlに上書きしておきます。
以降、themesディレクトリ以下のファイルを変更する際は全てブログ本体の同名ディレクトリにコピーしたものを使用しています。
config.tomlをカスタマイズする 自分のブログに合わせてconfig.tomlを編集していきます。ここではブログのタイトルや説明、 自分のSNSアカウントへのリンクや記事の共有ボタンの有効化などブログの基本的な要素を編集できるようになっているので、好きなようにカスタマイズします。
特に変わったことはしていませんが、1つあるとすればアイコンは私がGitHubで使っているものをURLで参照して持ってくるようにしています。 https://github.com/&amp;lt;USERNAME&amp;gt;.pngとするとアイコン画像を取得できます。 画像が思ったよりでかかったのでサイズは100pxとしておきます。ここまでの設定でconfig.tomlは以下のようになります。
# This appears at the top of the sidebar above params.intro.header. # A width of less than 100px is recommended from a design perspective. [params.intro.pic] src = &amp;#34;https://github.</description>
    </item>
    
  </channel>
</rss>
